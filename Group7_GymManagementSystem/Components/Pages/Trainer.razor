@page "/trainer"

<!--Either a form or a table showing the retrieved values-->
@if (showForm)
{
    <div class="d-flex justify-content-between align-items-left mb-3 display-md-3">
        <span class="h5 mb-0">New Trainer</span>
    </div>

    <div class="card mb-4">
        <div class="card-body">
            <EditForm Model="newTrainer" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group mb-2">
                    <label for="firstName">First Name</label>
                    <InputText id="firstName" name="firstName" class="form-control" @bind-Value="newTrainer.FirstName" placeholder="@newTrainer.FirstName" autocomplete="given-name" />
                </div>
                <div class="form-group mb-2">
                    <label for="lastName">Last Name</label>
                    <InputText id="lastName" name="lastName" class="form-control" @bind-Value="newTrainer.LastName" placeholder="@newTrainer.LastName" autocomplete="family-name" />
                </div>
                <div class="form-group mb-2">
                    <label for="phoneNumber">Phone Number [Format: (321) 123-2333]</label>
                    <InputText id="phoneNumber" name="phoneNumber" class="form-control" @bind-Value="newTrainer.PhoneNumber" placeholder="@newTrainer.PhoneNumber" autocomplete="tel" />
                </div>
                <div class="form-group mb-2">
                    <label for="email">Email</label>
                    <InputText id="email" name="email" class="form-control" @bind-Value="newTrainer.Email" placeholder="@newTrainer.Email" autocomplete="email" />
                </div>
                <div class="form-group mb-3">
                    <label for="speciality">Speciality</label>
                    <InputText id="speciality" name="speciality" class="form-control" @bind-Value="newTrainer.Speciality" placeholder="@newTrainer.Speciality" autocomplete="off" />
                </div>

                <button type="submit" class="btn btn-success">
                    @if (isEditMode)
                    {
                        <span>Update</span>
                    }
                    else
                    {
                        <span>Save</span>
                    }
                </button>
                <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancel</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="d-flex justify-content-between align-items-center mb-3 display-md-3">
        <span class="h5 mb-0">Trainer</span>
        <button class="btn btn-primary" @onclick="ToggleForm">Add</button>
    </div>

    <table class="table table-hover table-dark">
        <thead>
            <tr>
                <th scope="col">SL No.</th>
                <th scope="col">First Name</th>
                <th scope="col">Last Name</th>
                <th scope="col">Phone Number</th>
                <th scope="col">Email</th>
                <th scope="col">Speciality</th>
                <th scope="col">Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (Group7_GymManagementSystem.Data.Trainer trainer in trainers)
            {
                <tr>
                    <td>@trainer.Id</td>
                    <td>@trainer.FirstName</td>
                    <td>@trainer.LastName</td>
                    <td>@trainer.PhoneNumber</td>
                    <td>@trainer.Email</td>
                    <td>@trainer.Speciality</td>
                    <td>
                        <button class="btn btn-warning" @onclick="() => EditTrainer(trainer)">
                            <i class="bi bi-pencil"></i> Edit
                        </button>
                        <button class="btn btn-danger" @onclick="() => DeleteTrainer(trainer)">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Group7_GymManagementSystem.Data.Trainer> trainers = Group7_GymManagementSystem.Data.Trainer.GetAllTrainers();
    Group7_GymManagementSystem.Data.Trainer newTrainer = new();
    bool showForm = false;
    bool isEditMode = false;

    // Between a new one or and exidting an old one
    void ToggleForm()
    {
        showForm = !showForm;
        isEditMode = false;
        newTrainer = new();
    }

    // UI method to call the class method EditTrainer and AddTrainer from Staff
    void HandleValidSubmit()
    {
        try
        {
            if (trainers.Any() && !isEditMode)
            {
                newTrainer.Id = trainers.Max(c => c.Id) + 1;
            }

            if (isEditMode)
            {
                newTrainer.EditTrainer();
            }
            else
            {
                if (newTrainer == null)
                {
                    throw new Group7_GymManagementSystem.Data.CustomNullException("Trainer cannot be null.");
                }

                Group7_GymManagementSystem.Data.Trainer.AddTrainer(newTrainer);

            }
            showForm = false;
        }
        catch (Group7_GymManagementSystem.Data.CustomNullException ex)
        {
            Console.WriteLine("Custom Null Error: " + ex.Message);
        }
        catch (Exception e)
        {
            Console.WriteLine("Delete Error: " + e.Message);
        }
        finally
        {
            trainers = Group7_GymManagementSystem.Data.Trainer.GetAllTrainers();
        }
    }

    // On clicking the edit button in the data row realted to it u call this method, which helps the form have that row data prefilled. So that its eaier for you to see what you are changing
    void EditTrainer(Group7_GymManagementSystem.Data.Trainer trainer)
    {
        isEditMode = true;
        newTrainer = new Group7_GymManagementSystem.Data.Trainer
            {
                Id = trainer.Id,
                FirstName = trainer.FirstName,
                LastName = trainer.LastName,
                PhoneNumber = trainer.PhoneNumber,
                Email = trainer.Email,
                Speciality = trainer.Speciality
            };
        showForm = true;
    }

    // UI method to call the class method DeleteTrainer from Trainer
    void DeleteTrainer(Group7_GymManagementSystem.Data.Trainer trainer)
    {
        try
        {
            if (trainer == null)
            {
                throw new Group7_GymManagementSystem.Data.CustomNullException("Trainer cannot be null.");
            }

            Group7_GymManagementSystem.Data.Trainer.DeleteTrainer((int)trainer.Id);
        }
        catch (Group7_GymManagementSystem.Data.CustomNullException ex)
        {
            Console.WriteLine("Custom Null Error: " + ex.Message);
        }
        catch (Exception e)
        {
            Console.WriteLine("Delete Error: " + e.Message);
        }
        finally
        {
            trainers = Group7_GymManagementSystem.Data.Trainer.GetAllTrainers();
        }
    }

    // Exist from the form state when its a new one and also when it and existing one
    void CancelEdit()
    {
        showForm = false;
        isEditMode = false;
        newTrainer = new Group7_GymManagementSystem.Data.Trainer();
    }
}